import { Primer2 } from "./Primer/Primer2"
import { Primer3 } from "./Primer/Primer3"

const Components = () => {
    return (
  <div>

<h1 className="title">Components</h1>

<p><b>- </b>Создание функциональных компонентов</p>
<p><b>- </b>Создание классовых компонентов</p>
<p><b>- </b>Отличия и выбор между функциональными и классовыми компонентами</p>
   
<p><b className="redname">Компоненты </b>- это небольшие, <b>переиспользуемые элементы </b>пользовательского интерфейса, которые объединены вместе, чтобы создать более крупные приложения.
Компоненты позволяют разбить интерфейс на независимые части, <b>про которые легко думать в отдельности</b>. 
Например, всем известный интерфейс можно разбить на такие компоненты:</p>

<img src="https://redev.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc006f7c1-a10b-4e8a-8535-0dd76b6cd6fc%2FUntitled.png?table=block&id=f8be0431-a209-433e-aa4b-671af91afd3d&spaceId=6661104d-9510-4a9e-8688-ef35a5d42a1d&width=2000&userId=&cache=v2"
   alt='' width="500" ></img>
  
<p>Во многом компоненты ведут себя как <b>обычные функции JavaScript</b>. Они принимают произвольные входные данные 
  (<i>так называемые «пропсы»</i>) и возвращают React-элементы, описывающие, что мы хотим увидеть на экране. </p>

<p>Компоненты как кирпичики из которых ты можешь строить свое приложение</p>

<p>React компоненты могут быть <b>классовыми</b> или <b>функциональными</b>. </p>
<p>Пример объявления классового компонента в React:</p>
<Primer2/>
<p>Пример объявления функционального компонента в React:</p>
<Primer3/>

<p>Оба примера создают компонент, который отображает текст <b>"Привет, МИР!"</b>. Разница заключается в том, что классовый компонент наследуется от базового класса React. 
  Component 
  <b>и имеет доступ к дополнительным функциям, таким как состояние и методы жизненного цикла</b>.</p>
<p><i>Сейчас для объявления компонент используется <b>функциональный подход</b>. Классы потихоньку вымирают. Хотя ты еще можешь встретить проекты, где придется поддерживать код написанный на классах.</i></p>

<p><b>Компонента должна себя вести как чистая функция.</b></p>
<p><b>“Чистой”</b> называется функция, которая:</p>
<p><b>1. </b>Для одинаковых входных данных всегда возвращает один результат.</p>
<p><b>2. </b>Не имеет побочных эффектов (то есть не изменяет внешние состояния).</p>
<p><b>3. </b>Не зависит от внешних состояний.</p>

  </div>

    )
}
export { Components }  