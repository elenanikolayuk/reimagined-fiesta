import { Primer10 } from "./Primer/Primer10";
import { Primer11 } from "./Primer/Primer11";
import { Primer7 } from "./Primer/Primer7";
import Primer8 from "./Primer/Primer8";
import { Primer9 } from "./Primer/Primer9";


const State = () => {
    return (
  <div>
<h1 className="title">State (useState)</h1>
   
   <p>При разработке React-приложений состояние (<b>state</b>) играет важную роль. 
    Оно представляет собой данные, которые используются внутри компонента для отслеживания 
    и обновления информации. Состояние позволяет компонентам React быть динамичными и 
    реагировать на изменения данных или взаимодействие пользователя. Простыми словами, это то, 
    что ИЗМЕНЯЕТСЯ в компоненте, нежели props-ы которые неизменны.</p>

    <p>В React 16.8 появилась возможность использовать <b className="redname">state</b> в функциональных компонентах, 
    путем использования нового хука <b className="redname">useState</b>.</p>

   <p>Хук <b className="redname">useState</b> позволяет функциональным компонентам в React добавлять 
   локальное состояние. 
    Он возвращает возвращает массив с парой значений: текущее <b>значение состояния</b> и 
    <b> функцию для его обновления</b>. 
    При вызове функции обновления, React перерисует компонент с новым значением состояния.</p>

  <p><b>- </b><b className="redname">state</b>: текущее значение состояния.</p>
  <p><b>- </b><b className="redname">setState</b>: функция для обновления значения состояния.</p>

<h3 className="title">Параметры</h3>
<p><b>- </b><b className="redname">initialState</b>(необязательный): 
начальное значение состояния. Может быть примитивным типом данных, объектом или функцией.</p>

<h2 className="title">Создание state</h2>

<p>Для создания состояния в функциональных компонентах используется хук <b className="redname">setState</b>. 
  Он позволяет объявить переменную состояния и ее инициализацию. 
  Например, можно создать состояние для отслеживания текущего счетчика:</p>
<p>
В классовых компонентах состояние хранится в свойстве <b className="redname">state</b>. 
Начальное состояние определяется в конструкторе компонента:</p>

<h2 className="title">Обновление состояния</h2>

<p>Для обновления состояния в функциональных компонентах используется функция <b className="redname">setCount</b>, 
  которая является вторым элементом массива, возвращаемого <b className="redname">useState</b>. 
  При вызове <b className="redname">setCount</b> передается новое значение состояния. 
  React автоматически обновит компонент и перерисует его с новым значением состояния:</p>

<p>В классовых компонентах обновление состояния происходит с использованием метода <b className="redname">setState</b>. 
  Он принимает <b>объект </b> с обновленными значениями состояния или <b>функцию</b> (<i>подробнее ниже</i>). 
  React обновит состояние компонента и выполнит его перерисовку:</p>

<h2 className="title">Применение состояния в компонентах</h2>

<p>Состояние позволяет компонентам отображать и обновлять данные. Например, 
  состояние может использоваться для отслеживания введенных пользователем значений в 
  форме или для хранения информации, полученной из сервера. 
  Состояние также позволяет реагировать на события и обновлять компонент в соответствии с новыми данными. <br />
Пример использования состояния для отслеживания текущего счетчика и его отображения:</p>

<Primer7 />

<p>Компонент будет отображать текущее значение счетчика, а при нажатии на кнопку счетчик будет увеличиваться.</p>

<h2 className="title">Примеры использования state в компонентах</h2>
<h3 className="title">Управление отображением элементов</h3>

<Primer8 />

<p>В этом примере по клику на кнопку вызывается функция <b className="redname">handleClick</b>, 
  которая вызывается при клике на кнопку. 
  Она вызывает функцию <b className="redname">setShowText</b> которая изменяет 
  текущий <b className="redname">state</b> на противоположный, 
  что и отвечает за “показать” или “скрыть” текст.</p>

<h3 className="title">Управление input-ом</h3>

<Primer9 />

<p>В этом примере мы создали <b className="redname">state</b> с начальным значением пустой строки и присвоили его переменной name. 
  В инпуте по событию onChange мы вызываем эту функцию, 
  и меняет пустую строку, на те данные которые ввел пользователь. 
  Да да, <b className="redname">event.target.value</b> это те данные, 
  которые вводит пользователь. 
  И затем мы обратно в <b className="redname">input</b> в атрибуте <b className="redname">value</b> 
  присваиваем значение <b className="redname">state</b>.</p>

<h3 className="title">Управление стилями</h3>

<Primer10 />

<p>В этом примере мы создали <b className="redname">state</b> с начальным значением <b className="redname">'red'</b> 
  и присвоили его переменной <b className="redname">color</b>. Мы также создали функцию 
  <b className="redname">handleClick</b>, 
  которая вызывается при клике на кнопку, и использует функцию <b className="redname">setColor</b> 
  для изменения значения <b className="redname">state</b>. 
  Мы используем объект <b className="redname">style</b> для установки цвета текста, 
  который зависит от значения <b className="redname">state</b>.</p>

<p><b><i>State можно передавать в дочерние компоненты при помощи props.</i></b></p>
<Primer11 />

<p>В данном примере состояние счетчика хранится в родительском компоненте <b className="redname"> ParentComponent</b>, 
  а значение состояния передается в дочерний компонент <b className="redname">ChildComponent</b> через пропсы.</p>

 <h3 className="title">Примечания</h3>
<p><b>- </b>При вызове <b className="redname">useState</b> в компоненте, он будет выполнен при каждом рендеринге компонента. Поэтому важно обеспечить стабильность и неизменность порядка вызовов хуков внутри компонента. 
(поговорим про это дальше в LifeCycle) </p>

<p><b>- </b> Можно использовать несколько хуков 
<b className="redname">useState</b> в одном компоненте для добавления нескольких независимых состояний.</p>

<p><b>- </b>Если новое значение состояния совпадает с текущим значением, 
React выполнит оптимизацию и не проведет повторную отрисовку компонента.</p>

<p><b>- </b>Важно помнить, что хуки могут использоваться только внутри функциональных компонентов или других хуков.</p>

<p><b>- </b>Функция обновления состояния из <b className="redname">useState</b> может принимать значение
 или функцию, которая вычисляет новое значение состояния на основе предыдущего состояния. 
 Это особенно полезно при работе с состоянием, которое зависит от предыдущего значения.</p>

<h2 className="title">State в классах</h2>

<p>Хотя классовые компоненты сейчас не используются, но знать как с ними работать нужно. 
  Просто для большей уверенности на собеседовании. 
  Рекомендую разобрать это попозже, когда пройдешь первый блок и сделаешь задания.</p>








  </div>

    )
}
export { State }  