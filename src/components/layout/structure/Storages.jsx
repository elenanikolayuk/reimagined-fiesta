
const Storages= () => {
    return (
  <div>
<h1 className="title">Про STORAGEs (Local Storage, Session Storage, Local Forage…)</h1>

<h2 className="title">Local Storage</h2>
<p><b className="redname">Local Storage</b>
- это механизм, который позволяет веб-приложениям 
 сохранять данные локально в браузере. 
 Это означает, что данные <b>будут сохранены</b> 
 <b> после закрытия браузера и перезагрузки страницы</b>.
</p>
 
 <p><b className="redname">LocalStorage </b>
может быть использован для хранения 
различных типов данных, таких как строки, числа, 
булевы значения и объекты. Он может быть полезен 
для хранения пользовательских настроек 
<i>(например темная тема на сайте)</i>, предпочтений пользователя 
и других данных, которые могут быть 
использованы для персонализации пользовательского опыта.</p>

<p>Для записи данных в LocalStorage можно использовать 
<b className="redname">localStorage</b> объекта window в JavaScript. 
Например, чтобы записать строку <b>"Hello, Redev!" </b>
в LocalStorage, можно использовать:</p>

<p><b className="redname">localStorage.setItem('myData', 'Hello, Redev!');</b></p>

<p>В этом примере мы записываем строку 
  <b className="redname"> "Hello, Redev!"</b>* в 
LocalStorage с ключом 
<b className="redname"> myData</b>.</p>

<p>Чтобы <b>получить данные</b> из <b>LocalStorage</b>, можно 
использовать метод <b className="redname">getItem()</b> объекта <b>localStorage</b>. 
Например, чтобы получить значение, которое мы только что записали, 
можно использовать следующий код:</p>

<p><b className="redname">const myData = localStorage.getItem('myData');<br />
console.log(myData); // Выводится "Hello, Redev!"</b>
</p>

<p>В этом примере мы получаем значение из <b>LocalStorage</b> с ключом <b className="redname">"myData"</b> 
и записываем его в переменную <b className="redname"> myData</b>. </p>

<p>Обрати внимание, что данные в <b>LocalStorage </b>
хранятся <b>в виде строк</b>. 
При необходимости данные могут быть преобразованы 
в другие типы данных с помощью методов JavaScript,
 например <b className="redname"> parseInt() </b> или 
 <b className="redname"> JSON.parse() </b>.</p>

<p><b>LocalStorage</b> является безопасным механизмом хранения данных, 
поскольку данные сохраняются локально на 
компьютере пользователя и не передаются на сервер. 
Это также означает, что данные хранятся в пределах 
ограниченного объема памяти, доступного для браузера.</p>

<p>Использование <b>LocalStorage </b>может улучшить пользовательский опыт, 
  позволяя сохранять данные между визитами на сайт.</p>

<h2 className="title">Использование Cookies в React приложениях: Хранилище состояния и работа с ним</h2>
 
<p><b>Cookies </b> - это небольшие текстовые файлы, 
  которые веб-сайты отправляют и хранят на компьютере пользователя через 
  его веб-браузер. Они представляют собой удобный механизм для 
  хранения небольших данных, связанных с пользователем и веб-сайтом. 
  В контексте React приложений, 
  cookies могут быть использованы для сохранения 
  состояния приложения и обеспечения персонализации.</p>

<p><b>Зачем нужно хранилище в виде Cookies?</b> </p>
<p><b>1. </b> <b>Сохранение состояния</b>:
<b>Cookies </b> позволяют хранить небольшие объемы данных, 
такие как пользовательские настройки, предпочтения, 
идентификаторы сессий и другие данные, которые нужно 
сохранить между различными запросами или сеансами пользователей.</p>
<p><b>2. </b><b>Аутентификация и авторизация</b>:
<b>Cookies </b> могут использоваться для хранения токенов аутентификации, 
позволяя пользователю оставаться аутентифицированным в приложении 
даже после перезапуска браузера.</p>
<p><b>3. </b><b>Персонализация и отслеживание</b>: 
<b>Cookies</b> могут использоваться для анализа поведения 
пользователя на сайте и предоставления персонализированного опыта. 
Например, рекомендации товаров, основанные на предыдущих покупках.</p>

<h2 className="title">Отличие от LocalStorage</h2>
<p><b> Local Storage </b> и <b> Cookies </b> - это два разных механизма хранения данных 
на стороне клиента, и у них есть несколько ключевых различий:</p>
<p><b>1. </b><b>Емкость данных</b>: Cookies могут содержать до 4KB данных, 
в то время как Local Storage позволяет хранить около 5MB данных.</p>
<p><b>2. </b><b>Срок хранения</b>: Cookies имеют срок хранения, который можно указать, 
в то время как данные в Local Storage хранятся неограниченное время, пока их явно не удалить.</p>
<p><b>3. </b><b> !!!Передача данных!!!</b>: Cookies <b>автоматически включаются</b> 
в заголовки каждого HTTP-запроса 
к определенному домену, что делает их более подходящими для некоторых сценариев, 
таких как авторизация. 
<b> Local Storage</b> данные не автоматически передаются с каждым запросом.</p>

<h2 className="title">Работа с Cookies в React</h2>
<p>В React приложениях можно работать с cookies, используя 
JavaScript API для работы с ними или же библиотеку 
<a> https://www.npmjs.com/package/cookie. </a></p>

<p><b>Вот как осуществляется базовая работа:<br />
Установка Cookie:</b></p>
 <p><b className="redname">// Установка cookie на определенное количество дней<br />
document.cookie = "user_id=123; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/";</b></p>

<h2 className="title">Заключение</h2>

<p><b>Cookies</b> - это удобный механизм <b>хранения </b> <b>небольших данных</b>
<b>на стороне клиента</b>, который можно использовать 
в React приложениях для сохранения состояния, 
аутентификации и персонализации. 
Однако стоит помнить о его ограничениях, 
таких как ограниченный объем данных и срок хранения. 
При выборе между <b> Cookies </b> и <b> Local Storage </b> 
важно учитывать конкретные требования вашего приложения и его функциональности.</p>

<h2 className="title">Session Storage</h2>

<p><b className="redname">Session Storage</b> - это еще один механизм хранения 
данных в браузере, который работает так же, как и <b> LocalStorage</b>. 
Однако Session Storage имеет ряд отличий от <b> LocalStorage</b>.</p>

<p><b className="redname">Session Storage</b> сохраняет данные только на время сеанса 
браузера. Это означает, что данные будут удалены после
 закрытия браузера или вкладки. Это может быть полезно 
 для хранения временных данных, таких как формы, которые 
 не нужно сохранять после закрытия браузера.</p>

<p>Кроме того, <b className="redname">Session Storage</b> имеет более ограниченный объем
 хранения данных, чем <b> LocalStorage</b>. Это означает, 
 что он может быть полезен <b>для хранения небольших объемов</b> 
 данных, которые нужно сохранить только на время сеанса браузера.</p>

<h2 className="title"> СИНТАКСИС ТАКОЙ ЖЕ КАК И У LocalStorage</h2>

<p>
Чтобы записать данные в <b> Session Storage </b>, можно использовать объект 
<b> sessionStorage </b> в JavaScript. 
Например, чтобы записать строку "Hello, Redev!" в 
<b> Session Storage</b>, можно использовать:</p>

<p><b className="redname">sessionStorage.setItem('myData', 'Hello, Redev!');</b></p>

<p>В этом примере мы записываем строку "Hello, Redev!" в 
<b> Session Storage </b> с ключом <b> "myData" </b>.
Чтобы получить данные из <b> Session Storage</b>, 
можно использовать метод <b className="redname">getItem()</b> объекта 
<b> sessionStorage</b>.
 Например, чтобы получить значение, 
 которое мы только что записали, можно использовать следующий код:</p>

<p><b className="redname"> const myData = sessionStorage.getItem('myData');<br/>
console.log(myData); // Выводится "Hello, Redev!"</b></p>

<p>В этом примере мы получаем значение из <b> Session Storage  </b>
с ключом <b> "myData" </b> и записываем его в переменную <b className="redname"> myData </b>.</p>

<p>Обрати внимание, что данные в <b> Session Storage  </b>
 также хранятся <b> в виде строк</b>. 
 При необходимости данные могут быть преобразованы в другие типы данных
 с помощью методов JavaScript, например <b className="redname"> parseInt() </b> 
 или <b className="redname"> vb </b>.</p>

<p>Использование <b>Session Storage</b> может помочь улучшить пользовательский опыт,
 позволяя сохранять временные данные между переходами на разные страницы сайта.</p>
 
 <h2 className="title">localForage</h2>
 
 <p><b>localForage</b> - это JavaScript-библиотека, предоставляющая удобный 
асинхронный интерфейс для работы с локальными хранилищами в браузерах.
Эта библиотека позволяет сохранять данные в браузере пользователя, 
используя различные хранилища, такие как IndexedDB, WebSQL и localStorage, 
в зависимости от поддержки браузера.</p>

<p><b>Установка localForage</b></p>
<p>Ссылка на описание → <a> https://www.npmjs.com/package/localforage </a></p>

 <p>Прежде чем начать использовать <b> localForage</b>, 
необходимо установить эту библиотеку в  проекте на React. Выполни следующую команду:</p>

<p><b className="redname">npm install localforage</b></p>

<p>Использование <b>localForage</b> в React</p>
<p>Давайте представим, что у нас есть React-приложение, 
в котором мы хотим сохранить и извлечь пользовательские настройки. 
Для начала импортируем <b>localForage</b> в нашем компоненте:</p>
<p><b className="redname">import localforage from 'localforage';</b></p>

<p>Эта библиотека позволяет асинхронно сохранять и извлекать 
  данные из различных хранилищ, обеспечивая более 
  эффективное управление данными на стороне клиента. 
  Работа с <b> localForage </b> интуитивно понятна и удобна для сохранения 
  пользовательских настроек, к
  эширования данных и других задач, требующих локального хранения данных.</p>



   
 
  </div>

    )
}
export { Storages }  